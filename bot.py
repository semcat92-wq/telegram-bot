#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import platform

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
print(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
print(f"üìã Python –≤–µ—Ä—Å–∏—è: {sys.version}")
print(f"üíª –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}")

try:
    import pandas as pd
    import logging
    from telegram import Update
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
    from dotenv import load_dotenv
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–æ–¥—É–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π:")
    print("   python3 -m pip install pandas openpyxl python-telegram-bot python-dotenv")
    sys.exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TradingPointBot:
    def __init__(self, excel_file_path):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"""
        self.excel_file = excel_file_path
        self.df_north = None
        self.df_center = None
        print(f"üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: {excel_file_path}")
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(self.excel_file):
                raise FileNotFoundError(f"–§–∞–π–ª {self.excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            
            print("üìñ –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç '–°–µ–≤–µ—Ä'...")
            self.df_north = pd.read_excel(self.excel_file, sheet_name='–°–µ–≤–µ—Ä')
            
            print("üìñ –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç '–¶–µ–Ω—Ç—Ä'...")
            self.df_center = pd.read_excel(self.excel_file, sheet_name='–¶–µ–Ω—Ç—Ä')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
            self.df_north['–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û'] = self.df_north['–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û'].astype(str).str.lower().str.strip()
            self.df_center['–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û'] = self.df_center['–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û'].astype(str).str.lower().str.strip()
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df_north)} –∑–∞–ø–∏—Å–µ–π —Å –ª–∏—Å—Ç–∞ '–°–µ–≤–µ—Ä'")
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df_center)} –∑–∞–ø–∏—Å–µ–π —Å –ª–∏—Å—Ç–∞ '–¶–µ–Ω—Ç—Ä'")
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Excel —Ñ–∞–π–ª–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def search_trading_point(self, name):
        """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        name = name.strip().lower()
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: '{name}'")
        
        # –ò—â–µ–º –≤ –ª–∏—Å—Ç–µ "–°–µ–≤–µ—Ä"
        result_north = self.df_north[self.df_north['–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û'] == name]
        
        # –ò—â–µ–º –≤ –ª–∏—Å—Ç–µ "–¶–µ–Ω—Ç—Ä"  
        result_center = self.df_center[self.df_center['–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û'] == name]
        
        if not result_north.empty:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –ª–∏—Å—Ç–µ '–°–µ–≤–µ—Ä': {len(result_north)} –∑–∞–ø–∏—Å–µ–π")
            return self.format_result(result_north.iloc[0], '–°–µ–≤–µ—Ä')
        elif not result_center.empty:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –ª–∏—Å—Ç–µ '–¶–µ–Ω—Ç—Ä': {len(result_center)} –∑–∞–ø–∏—Å–µ–π")
            return self.format_result(result_center.iloc[0], '–¶–µ–Ω—Ç—Ä')
        else:
            logger.info(f"‚ùå –¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
    
    def format_result(self, row, sheet_name):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
            def get_value(column_name, default='–ù–µ —É–∫–∞–∑–∞–Ω–æ'):
                value = row.get(column_name)
                if pd.isna(value) or value == '':
                    return default
                return str(value)
            
            if sheet_name == '–°–µ–≤–µ—Ä':
                result_text = f"""
üè™ *{get_value('–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û').title()}* ({sheet_name})

üìã *–§–æ—Ä–º–∞—Ç:* {get_value('–§–æ—Ä–º–∞—Ç')}
üè¢ *–§–∏–ª–∏–∞–ª:* {get_value('–§–∏–ª–∏–∞–ª')}
üë®‚Äçüíº *–ú–µ–Ω–µ–¥–∂–µ—Ä:* {get_value('–ú–µ–Ω–µ–¥–∂–µ—Ä')}
üë©‚Äçüíº *–î–§:* {get_value('–î–§')}  
üë®‚Äçüíº *–î–ì:* {get_value('–î–ì')}
üìç *–ê–¥—Ä–µ—Å:* {get_value('–ê–¥—Ä–µ—Å')}
üî¢ *–ü–∏–Ω:* {get_value('–ü–∏–Ω')}
                """
            else:  # –¶–µ–Ω—Ç—Ä
                result_text = f"""
üè™ *{get_value('–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û').title()}* ({sheet_name})

üìã *–§–æ—Ä–º–∞—Ç:* {get_value('–§–æ—Ä–º–∞—Ç')}
üë®‚Äçüíº *–í–°–°–ë:* {get_value('–í–°–°–ë')}
üë©‚Äçüíº *–°–°–ë:* {get_value('–°–°–ë')}
üìç *–ê–¥—Ä–µ—Å:* {get_value('–ê–¥—Ä–µ—Å')}
üî¢ *–ü–∏–Ω:* {get_value('–ü–∏–Ω')}
üë®‚Äçüíº *–î–∏—Ä–µ–∫—Ç–æ—Ä –ì—Ä—É–ø–ø—ã:* {get_value('–î–∏—Ä–µ–∫—Ç–æ—Ä –ì—Ä—É–ø–ø—ã')}
                """
            
            return result_text.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö"

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
try:
    bot_instance = TradingPointBot('Test2-2.xlsx')
    print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
except Exception as e:
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞: {e}")
    bot_instance = None

async def start_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–∫–∞—Ö*

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞*, –∏ —è –Ω–∞–π–¥—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º.

*–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞:*
‚Ä¢ –ì—É–ª—å–¥–µ–Ω
‚Ä¢ –ß–∞–ª–∫–∞  
‚Ä¢ –ê–≤–∏–Ω–¥–∞
‚Ä¢ –ë–∞–∫–∏–Ω–≥–µ–º
‚Ä¢ –î–∂–æ–Ω–∫–∞

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
2. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
3. –ï—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ø–æ–º–æ—â—å
/reload - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def help_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
*–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

ü§ñ *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:*
–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–∫–∞—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Excel

üîç *–ö–∞–∫ –∏—Å–∫–∞—Ç—å:*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —á–∞—Ç

üìù *–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π:*
‚Ä¢ –ì—É–ª—å–¥–µ–Ω
‚Ä¢ –ß–∞–ª–∫–∞
‚Ä¢ –ê–≤–∏–Ω–¥–∞
‚Ä¢ –ë–∞–∫–∏–Ω–≥–µ–º

‚ö° *–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/reload - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def reload_command(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reload - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"""
    global bot_instance
    try:
        bot_instance.load_data()
        await update.message.reply_text("‚úÖ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Excel —Ñ–∞–π–ª–∞!*", parse_mode='Markdown')
        logger.info("–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await update.message.reply_text(f"‚ùå *–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:* {e}", parse_mode='Markdown')
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if bot_instance is None:
        await update.message.reply_text("‚ùå *–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö*", parse_mode='Markdown')
        return
    
    user_message = update.message.text.strip()
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not user_message:
        await update.message.reply_text("üìù *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞*", parse_mode='Markdown')
        return
    
    # –ò—â–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Ç–æ—á–∫—É
    result = bot_instance.search_trading_point(user_message)
    
    if result:
        await update.message.reply_text(result, parse_mode='Markdown')
    else:
        error_message = f"""
‚ùå *–¢–æ—Ä–≥–æ–≤–∞—è —Ç–æ—á–∫–∞ "{user_message}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*

*–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*
‚Ä¢ –û–ø–µ—á–∞—Ç–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
‚Ä¢ –ú–∞–≥–∞–∑–∏–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤

*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        """
        await update.message.reply_text(error_message, parse_mode='Markdown')

async def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}")
    
    if update and update.message:
        await update.message.reply_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ*",
            parse_mode='Markdown'
        )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    
    if not BOT_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞: BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
        print("–ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export BOT_TOKEN='–≤–∞—à_—Ç–æ–∫–µ–Ω'")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞
    if bot_instance is None:
        print("‚ùå –û–®–ò–ë–ö–ê: –ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ Test2-2.xlsx")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("reload", reload_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("üìç –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê: {e}")

if __name__ == '__main__':
    main()