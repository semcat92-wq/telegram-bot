#!/usr/bin/env python3

import os
import sys
import logging
from dotenv import load_dotenv

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
try:
    import pandas as pd
    from telegram import Update
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
    print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–ª–∞—á–Ω—É—é –≤–µ—Ä—Å–∏—é –±–æ—Ç–∞...")
print(f"üì¶ pandas –≤–µ—Ä—Å–∏—è: {pd.__version__}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class TradingBot:
    def __init__(self):
        self.df = None
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel...")
            
            # –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
            self.df = pd.read_excel('Test2-2.xlsx', sheet_name='–°–µ–≤–µ—Ä', engine='openpyxl')
            
            # –û—á–∏—â–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.df['–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û'] = self.df['–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û'].astype(str).str.lower().str.strip()
            self.df = self.df.fillna('–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(self.df)} —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def search(self, name):
        """–ü–æ–∏—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏"""
        name = name.lower().strip()
        
        result = self.df[self.df['–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û'] == name]
        
        if not result.empty:
            return self.format_result(result.iloc[0])
        
        return None
    
    def format_result(self, row):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        def safe_get(col):
            val = row.get(col)
            if val is None or val == '' or str(val).lower() == 'nan':
                return '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            return str(val)
        
        result_text = f"""
üè™ *{safe_get('–ù–∞–∑–≤–∞–Ω–∏–µ –¢–û').title()}*

üìã *–§–æ—Ä–º–∞—Ç:* {safe_get('–§–æ—Ä–º–∞—Ç')}
üè¢ *–§–∏–ª–∏–∞–ª:* {safe_get('–§–∏–ª–∏–∞–ª')}
üë®‚Äçüíº *–ú–µ–Ω–µ–¥–∂–µ—Ä:* {safe_get('–ú–µ–Ω–µ–¥–∂–µ—Ä')}
üë©‚Äçüíº *–î–§:* {safe_get('–î–§')}
üë®‚Äçüíº *–î–ì:* {safe_get('–î–ì')}
üìç *–ê–¥—Ä–µ—Å:* {safe_get('–ê–¥—Ä–µ—Å')}
üî¢ *–ü–∏–Ω:* {safe_get('–ü–∏–Ω')}
        """.strip()
        
        return result_text

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
try:
    bot = TradingBot()
    print("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
    sys.exit(1)

async def start_command(update: Update, context: CallbackContext):
    text = """
üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–∫–∞—Ö*

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞*, –∏ —è –Ω–∞–π–¥—É –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

*–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∑–≤–∞–Ω–∏–π:*
‚Ä¢ –ì—É–ª—å–¥–µ–Ω
‚Ä¢ –ß–∞–ª–∫–∞
‚Ä¢ –î–∂–æ–Ω–∫–∞
‚Ä¢ –ë–∞–∫–∏–Ω–≥–µ–º

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–º–æ—â—å
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    """
    await update.message.reply_text(text, parse_mode='Markdown')

async def help_command(update: Update, context: CallbackContext):
    help_text = """
*–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

ü§ñ *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:*
–ò—â–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–∫–∞—Ö

üîç *–ö–∞–∫ –∏—Å–∫–∞—Ç—å:*
–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —á–∞—Ç

‚ö° *–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status_command(update: Update, context: CallbackContext):
    status_text = f"""
ü§ñ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ
üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫: {len(bot.df)}
üîÑ –í–µ—Ä—Å–∏—è: –û–±–ª–∞—á–Ω–∞—è 2.0
üìç –•–æ—Å—Ç–∏–Ω–≥: Render.com
    """
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def handle_message(update: Update, context: CallbackContext):
    user_text = update.message.text.strip()
    
    if not user_text:
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞")
        return
    
    result = bot.search(user_text)
    
    if result:
        await update.message.reply_text(result, parse_mode='Markdown')
    else:
        error_text = f"""
‚ùå *–ú–∞–≥–∞–∑–∏–Ω \"{user_text}\" –Ω–µ –Ω–∞–π–¥–µ–Ω*

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
        """
        await update.message.reply_text(error_text, parse_mode='Markdown')

def main():
    token = os.getenv('BOT_TOKEN')
    
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        application = Application.builder().token(token).build()
        
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("üéØ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ –æ–±–ª–∞–∫–µ!")
        print("üìç –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 24/7")
        
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()